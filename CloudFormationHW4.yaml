---

AWSTemplateFormatVersion: 2010-09-09

Description: Reference Architecture to deploy EC2 instance in the region of my choice.

Metadata:

  Authors:
    Description: Claire Ambang (claire.agbor@gmail.com)

Parameters:
  
  SecurityGroupDescription:
    Description: Security group for SSH and HHTP
    Type: String
  
  SecurityGroupPort1:
    Description: Port that is locked for ssh to my Desktop
    Type: Number
    MinValue: 20 # out range 19
    MaxValue: 65535
  SecurityGroupPort2:
    Description: Allows internet access for http on port 80
    Type: Number
    MinValue: 20 # out range 19
    MaxValue: 65535
  
  InstanceType:
    Description: Windoes EC2 instance type for HW4
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /dev/ec2/instanceType
  
  ImageID: 
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-windows-latest/EC2LaunchV2-Windows_Server-2016-English-Full-Base

  
  DBPwd:
    NoEcho: true
    Description: The database admin account password (won't be echoed)
    Type: String
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  SecurityGroupIngressCIDR1:
    Description: Locked to my Desktop
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 107.217.61.140/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SecurityGroupIngressCIDR2:
    Description: Allows internet access on port 80 for HTTP
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
 
  MyVPC:
    Description: VPC to operate in
    Type: AWS::EC2::VPC::Id
  
  MySubnetIDs:
    Description: Subnet IDs that is a List of Subnet Id
    Type: 'List<AWS::EC2::Subnet::Id>'
  PublicSubnet1: # taken out. See explanation below.
    Type: String
  #  Default: subnet-0575526893d7e2c91 (Taking it out in order not to hardcode subnet)
  # DbSubnetIpBlocks:
  #   Description: "Comma-delimited list of three CIDR blocks"
  #   Type: CommaDelimitedList
  #   Default: "10.0.48.0/24, 10.0.112.0/24, 10.0.176.0/24"

Resources:
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      #we reference the InstanceType parameter
      InstanceType: !Ref InstanceType # (this links to the instance type parameter above)
      KeyName: !Ref KeyName # (This is the key name in the parameter above)
      ImageId: !Ref ImageID
      # here we reference an internal CloudFormation resource
      SubnetId: !Ref PublicSubnet1
      # Link EC2 instance to security group (two resources)
      SecurityGroupIds:
        - !Ref MySecurityGroup # Referencing the security group
      # SecurityGroups :
      #   - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: ClaireInstance
  
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyEC2Instance
  
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref SecurityGroupDescription
      SecurityGroupIngress:
        - CidrIp: !Ref SecurityGroupIngressCIDR1
          FromPort: !Ref SecurityGroupPort1
          ToPort: !Ref SecurityGroupPort1
          IpProtocol: tcp  
        - CidrIp: !Ref SecurityGroupIngressCIDR2
          FromPort: !Ref SecurityGroupPort2
          ToPort: !Ref SecurityGroupPort2
          IpProtocol: tcp
      VpcId: !Ref MyVPC

Outputs:
  ServerSecurityGroup:
    Description: The SSH Security Group for our Company
    Value: !Ref MySecurityGroup # This shall be the security group name
    Export: # Make the output available to re-use
      Name: ServerSecurityGroup # variable need to be GLOBALLY UNIQUE
  EC2Intance:
    Description: Type of Instance
    Value: !Ref MyEC2Instance # This is the name of the instance
    Export: # Make the output available to re-use
      Name: ClaireInstance # variable need to be GLOBALLY UNIQUE 
